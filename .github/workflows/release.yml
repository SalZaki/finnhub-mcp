name: Release

on:
  push:
    branches:
      - main
      - release
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - 'assets/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release:
    name: 📦 Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      upload_url: ${{ steps.release.outputs.upload_url }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔖 Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: simple
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .release-please-config.json

  build:
    name: 🔧 Build & Upload Artifacts
    needs: release
    if: ${{ needs.release.outputs.release_created }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows - most common architectures
          - os: windows-latest
            runtime: win-x64
            artifact_name: finnhub-mcp-win-x64.exe
          - os: windows-latest
            runtime: win-arm64
            artifact_name: finnhub-mcp-win-arm64.exe

          # Linux - most common architectures
          - os: ubuntu-latest
            runtime: linux-x64
            artifact_name: finnhub-mcp-linux-x64
          - os: ubuntu-latest
            runtime: linux-arm64
            artifact_name: finnhub-mcp-linux-arm64

          # macOS - both Intel and Apple Silicon
          - os: macos-latest
            runtime: osx-x64
            artifact_name: finnhub-mcp-osx-x64
          - os: macos-latest
            runtime: osx-arm64
            artifact_name: finnhub-mcp-osx-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧰 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore
        run: dotnet restore ./finnhub-mcp.sln

      - name: 🔍 Verify Runtime Support
        run: |
          echo "Building for runtime: ${{ matrix.runtime }}"
          echo "On OS: ${{ matrix.os }}"
          dotnet --list-runtimes

      - name: 📦 Publish
        run: |
          VERSION_CLEAN=${{ needs.release.outputs.tag_name }}
          VERSION_CLEAN=${VERSION_CLEAN#v}
          echo "Publishing version: $VERSION_CLEAN"

          dotnet publish src/FinnHub.MCP.Server/FinnHub.MCP.Server.csproj \
            -c Release \
            -r ${{ matrix.runtime }} \
            --self-contained true \
            --no-restore \
            -p:Version=$VERSION_CLEAN \
            -p:AssemblyVersion=$VERSION_CLEAN \
            -p:FileVersion=$VERSION_CLEAN \
            -p:DebugType=None \
            -p:DebugSymbols=false \
            -p:PublishSingleFile=true \
            -o ./publish
        env:
          DOTNET_CLI_TELEMETRY_OPTOUT: 1

      - name: 📋 List Published Files
        shell: bash
        run: |
          echo "Files in publish directory:"
          ls -la ./publish/

      - name: 🧼 Prepare Artifact
        shell: bash
        run: |
          cd ./publish

          if [[ "${{ matrix.runtime }}" == win-* ]]; then
            # Windows: Look for .exe files
            EXEC=$(find . -name "*.exe" -type f | head -1)
            if [ -z "$EXEC" ]; then
              echo "❌ No .exe file found in Windows build"
              exit 1
            fi
            echo "Found Windows executable: $EXEC"
            mv "$EXEC" "${{ matrix.artifact_name }}"
          else
            # macOS/Linux: Find the first executable file (POSIX-safe)
            EXEC=$(find . -type f ! -name "*.dll" ! -name "*.so" ! -name "*.dylib" ! -name "*.json" ! -name "*.pdb" ! -name "*.*" | while read file; do
              if [ -x "$file" ]; then
                echo "$file"
                break
              fi
            done)

            if [ -z "$EXEC" ]; then
              echo "❌ No executable found in Unix build"
              ls -la
              exit 1
            fi

            echo "Found Unix executable: $EXEC"
            mv "$EXEC" "${{ matrix.artifact_name }}"
            chmod +x "${{ matrix.artifact_name }}"
          fi

          echo "Final artifact: ${{ matrix.artifact_name }}"
          ls -la "${{ matrix.artifact_name }}"

      - name: ✅ Verify Artifact
        shell: bash
        run: |
          cd ./publish
          if [ ! -f "${{ matrix.artifact_name }}" ]; then
            echo "❌ Artifact ${{ matrix.artifact_name }} not found"
            exit 1
          fi

          # Get file size
          SIZE=$(stat -c%s "${{ matrix.artifact_name }}" 2>/dev/null || stat -f%z "${{ matrix.artifact_name }}" 2>/dev/null || echo "unknown")
          echo "✅ Artifact size: $SIZE bytes"

          # Verify it's executable (Unix only)
          if [[ "${{ matrix.runtime }}" != win-* ]] && [ ! -x "${{ matrix.artifact_name }}" ]; then
            echo "❌ Artifact is not executable"
            exit 1
          fi

      - name: 🚀 Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release.outputs.tag_name }}
          files: |
            ./publish/${{ matrix.artifact_name }}
            ./publish/appsettings.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📊 Build Summary
        if: always()
        shell: bash
        run: |
          echo "## Build Summary for ${{ matrix.runtime }}" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Runtime**: ${{ matrix.runtime }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact**: ${{ matrix.artifact_name }}" >> $GITHUB_STEP_SUMMARY

          if [ -f "./publish/${{ matrix.artifact_name }}" ]; then
            SIZE=$(stat -c%s "./publish/${{ matrix.artifact_name }}" 2>/dev/null || stat -f%z "./publish/${{ matrix.artifact_name }}" 2>/dev/null || echo "unknown")
            echo "- **Size**: $SIZE bytes" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          fi
