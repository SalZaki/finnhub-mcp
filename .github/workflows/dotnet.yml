name: .NET Restore, Build, Test, and Coverage

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'Docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - 'Docs/**'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  id-token: write

jobs:

  build:
    name: 🛠️ Build Solution
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore ./finnhub-mcp.sln

      - name: 🏗️ Build solution
        run: dotnet build -p:CurrentYear=$(date +'%Y') --no-restore --configuration Release

  format:
    name: 🎨 Code Style Check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: ✅ Verify code formatting
        run: dotnet format --verify-no-changes --verbosity diagnostic

  test:
    name: 🧪 Unit Tests & 📊 Coverage
    runs-on: ubuntu-latest
    needs: format

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🧰 Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: 📦 Restore dependencies
        run: dotnet restore ./finnhub-mcp.sln

      - name: 🧪 Run unit tests with coverage
        run: |
          mkdir -p TestResults
          mkdir -p Coverage

          # Run all tests with coverage and collect results
          dotnet test ./finnhub-mcp.sln \
            --configuration Release \
            --verbosity normal \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./TestResults \
            --collect:"XPlat Code Coverage" \
            --settings coverlet.runsettings \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.ExcludeByAttribute=GeneratedCodeAttribute

      - name: 📂 Process coverage files
        run: |
          # Create coverage directory (lowercase)
          mkdir -p ./Coverage

          # Debug: Show the actual structure
          echo "TestResults directory structure:"
          find ./TestResults -name "coverage.cobertura.xml" -ls

          # Find all coverage files and copy them
          counter=1
          for file in $(find ./TestResults -name "coverage.cobertura.xml"); do
            # Extract a unique identifier from the path
            dir_name=$(dirname "$file" | sed 's|.*/||')
            cp "$file" "./Coverage/coverage-${counter}-${dir_name}.cobertura.xml"
            echo "Copied $file to ./Coverage/coverage-${counter}-${dir_name}.cobertura.xml"
            ((counter++))
          done

          # Copy test results file
          find ./TestResults -name "*.trx" -exec cp {} ./Coverage/ \;

          # Show what we have
          echo "Files in coverage directory:"
          ls -la ./Coverage/

      - name: 📂 Show coverage and test files
        run: |
          echo "Coverage files:"
          find ./Coverage -name "*.xml" -o -name "*.trx"
          echo "TestResults files:"
          find ./TestResults -type f

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./Coverage/*.cobertura.xml
          flags: unit-tests
          name: codecov-finnhub-mcp
          fail_ci_if_error: true
          verbose: true

      - name: 📤 Upload test results to Codecov
        uses: codecov/test-results-action@v1
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./TestResults/*.trx
          flags: unit-tests
          name: codecov-test-results-finnhub-mcp

      - name: 📊 Publish test results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: .NET Tests
          path: ./TestResults/*.trx
          reporter: dotnet-trx

      - name: 📁 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ./TestResults/
            ./Coverage/
